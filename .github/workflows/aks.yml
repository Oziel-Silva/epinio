name: AKS-CI

# TODO switch to AKS/Scenario3

on:
  schedule:
    - cron:  '0 5 * * *'
  workflow_dispatch:
    inputs:
      aws_id:
        description: "AWS_ACCESS_KEY_ID"
        required: false
        default: ""
      aws_key:
        description: "AWS_SECRET_ACCESS_KEY"
        required: false
        default: ""
      azure_credentials:
        description: "AZURE_CREDENTIALS"
        required: false
        default: ""
      keep_cluster:
        description: "Keep the cluster afterwards? (empty/yes)"
        required: false
        default: ""

env:
  SETUP_GO_VERSION: '^1.13.7'
  GINKGO_NODES: 1

jobs:
  acceptance-scenario4:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get All Git Tags
        run: git fetch --force --prune --unshallow --tags

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}
      - name: Setup Ginkgo Test Framework
        run: go install github.com/onsi/ginkgo/ginkgo@v1.16.2

      - name: Configure AWS credentials for Route53
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ github.event.inputs.aws_id || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.aws_key || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # follow https://github.com/marketplace/actions/azure-login#configure-deployment-credentials
      # az group create --name epinioCI --location westeurope
      # az ad sp create-for-rbac --name "epinioCI" --sdk-auth --role contributor \
      #   --scopes /subscriptions/{id}/resourceGroups/epinioC
      - uses: azure/login@v1
        with:
          creds: ${{ github.events.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Create AKS cluster
        id: create-cluster
        shell: bash
        run: |
          id=$RANDOM
          echo '::set-output name=ID::'$id
          az aks create --resource-group epinioCI --name epinioCI$id --node-count 1 --generate-ssh-keys
          az aks get-credentials --resource-group epinioCI --name epinioCI$id --file kubeconfig

      - name: Installation Acceptance Tests
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          REGEX: Scenario3
          AWS_ZONE_ID: ${{ secrets.AWS_ZONE_ID }}
          AKS_DOMAIN: ${{ secrets.AKS_DOMAIN }}
        shell: bash
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          make test-acceptance-install

      - name: Delete AKS cluster
        if: ${{ always() && !github.event.inputs.keep_cluster }}
        shell: bash
        run: |
          id="${{ steps.create-cluster.outputs.ID }}"
          az aks delete --resource-group epinioCI --name epinioCI$id --yes
